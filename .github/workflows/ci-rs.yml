name: Continuous integration ü¶Ä

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
  merge_group:
    types: [checks_requested]
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CI: true # insta snapshots behave differently on ci
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  CAPNPROTO_VERSION: "1.1.0"

jobs:
  # Check if changes were made to the relevant files.
  # Always returns true if running on the default branch, to ensure all changes are thoroughly checked.
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/check-changes
        id: filter

  rs-check:
    name: Check lints
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Run clippy
        run: cargo clippy --all-targets --all-features --workspace -- -D warnings
      - name: Build docs
        run: cargo doc --no-deps --all-features --workspace
        env:
          RUSTDOCFLAGS: "-Dwarnings"

  rs-benches:
    name: Build Rust benchmarks üèãÔ∏è
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Build benchmarks with all features
        run: cargo bench --verbose --no-run  --all-features

  # Run tests on Rust stable with all features
  rs-tests-stable-all-features:
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    name: tests (Rust stable, all features)
    steps:
      - uses: actions/checkout@v5
      - uses: mozilla-actions/sccache-action@v0.0.9
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "stable"
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Build with all features
        run: cargo test --verbose  --all-features --no-run
      - name: Tests with all features
        run: cargo test --verbose  --all-features

  # Run tests on other toolchains
  rs-tests-other:
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        # Stable is covered by `tests-stable-all-features`
        # Nightly is covered by `tests-nightly-coverage`
        rust: ["1.85", beta]
    name: tests (Rust ${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v5
      - uses: mozilla-actions/sccache-action@v0.0.9
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Build with all features
        run: cargo test --verbose  --all-features --no-run
      - name: Tests with all features
        run: cargo test --verbose  --all-features

  # Run tests on nightly and upload test coverage
  rs-tests-nightly-coverage:
    needs: changes
    # Run only if there are changes in the relevant files
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    name: tests (Rust nightly, coverage)
    steps:
      - uses: actions/checkout@v5
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: dtolnay/rust-toolchain@master
        with:
          # Nightly is required to count doctests coverage
          toolchain: "nightly"
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests with coverage instrumentation
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov --no-report --all-features --doctests
      - name: Generate coverage report
        run: cargo llvm-cov --all-features report --codecov --output-path coverage.json
      - name: Upload coverage to codecov.io
        # TODO: Setup Covecov.io coverage reporting
        if: false
        uses: codecov/codecov-action@v5
        with:
          files: impl/coverage.json
          name: rust
          flags: rust
          #token: ${{ secrets.CODECOV_TOKEN }}

  # This is a meta job to mark successful completion of the required checks,
  # even if they are skipped due to no changes in the relevant files.
  required-checks:
    name: Required checks
    needs: [
      changes,
      rs-check,
      rs-tests-stable-all-features,
    ]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Fail if required checks failed
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "Required checks failed"
          echo "Please check the logs for more information"
          exit 1
      - name: Pass if all required checks passed
        run: |
          echo "All required checks passed"
